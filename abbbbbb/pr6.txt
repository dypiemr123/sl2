#6 Implement Artificial Neural Network training process in Python by using Forward Propagation, Back Propagation.

import numpy as np

# Sigmoid Activation Function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Derivative of Sigmoid (used for Backpropagation)
def sigmoid_derivative(x):
    return x * (1 - x)

# Simple Neural Network Class
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Initialize weights and biases with random values
        self.weights_input_hidden = np.random.rand(input_size, hidden_size)  # Weights between input and hidden layers
        self.weights_hidden_output = np.random.rand(hidden_size, output_size)  # Weights between hidden and output layers
        self.bias_hidden = np.random.rand(1, hidden_size)  # Bias for hidden layer
        self.bias_output = np.random.rand(1, output_size)  # Bias for output layer
    
    # Forward propagation (to calculate predictions)
    def forward(self, X):
        self.hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden  # Input to hidden layer
        self.hidden_output = sigmoid(self.hidden_input)  # Output of hidden layer after activation
        self.final_input = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_output  # Input to output layer
        self.final_output = sigmoid(self.final_input)  # Output of the network after activation
        return self.final_output
    
    # Backpropagation (to update weights and biases)
    def backpropagate(self, X, y, learning_rate=0.1):
        output_error = y - self.final_output  # Error at output layer
        output_delta = output_error * sigmoid_derivative(self.final_output)  # Gradient for output layer
        
        hidden_error = output_delta.dot(self.weights_hidden_output.T)  # Error at hidden layer
        hidden_delta = hidden_error * sigmoid_derivative(self.hidden_output)  # Gradient for hidden layer
        
        # Update weights and biases using gradient descent
        self.weights_input_hidden += X.T.dot(hidden_delta) * learning_rate
        self.weights_hidden_output += self.hidden_output.T.dot(output_delta) * learning_rate
        self.bias_hidden += np.sum(hidden_delta, axis=0, keepdims=True) * learning_rate
        self.bias_output += np.sum(output_delta, axis=0, keepdims=True) * learning_rate
    
    # Training function
    def train(self, X, y, epochs=10000, learning_rate=0.1):
        for epoch in range(epochs):
            self.forward(X)  # Forward pass
            self.backpropagate(X, y, learning_rate)  # Backward pass to adjust weights
            
            # Print the error every 1000 epochs
            if epoch % 1000 == 0:
                error = np.mean(np.square(y - self.final_output))  # Mean Squared Error
                print(f"Epoch {epoch} - Error: {error}")

# Sample Training Data (XOR Problem)
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])  # Input features (XOR)
y = np.array([[0], [1], [1], [0]])  # Expected output

# Create the neural network with 2 inputs, 4 hidden neurons, and 1 output
nn = NeuralNetwork(input_size=2, hidden_size=4, output_size=1)

# Train the network
nn.train(X, y)

# After training, test the network on the same data
print("\nFinal predictions after training:")
for x in X:
    prediction = nn.forward(x)  # Get the predicted output
    print(f"Input: {x} -> Predicted Output: {prediction}")
